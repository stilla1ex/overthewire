from django.db import models

# Create your models here.
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin

class CustomUserManager(BaseUserManager):
    def create_user(self, username, email, password=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(username=username, email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, email, password=None, **extra_fields):
        extra_fields.setdefault('role', 'admin')
        return self.create_user(username, email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    username = models.CharField(max_length=50, unique=True)
    email = models.EmailField(max_length=100, unique=True)
    password_hash = models.CharField(max_length=255)  # Django handles password hashing internally
    role = models.CharField(max_length=10, choices=[('admin', 'Admin'), ('analyst', 'Analyst'), ('viewer', 'Viewer')])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']

    def __str__(self):
        return self.email
    
# The model for uploading files
from django.db import models

class UploadedFile(models.Model):
    file = models.FileField(upload_to='uploads/')  # Files will be saved to 'media/uploads/'
    file_name = models.CharField(max_length=255)
    file_size = models.IntegerField()
    uploaded_at = models.DateTimeField(auto_now_add=True)
    threat_level = models.CharField(max_length=20, choices=[
        ('safe', 'Safe'),
        ('suspicious', 'Suspicious'),
        ('harmful', 'Harmful'),
    ], default='pending')

    def __str__(self):
        return self.file_name
    

# class File(models.Model):
#     STATUS_CHOICES = [
#         ('safe', 'Safe'),
#         ('harmful', 'Harmful'),
#         ('unknown', 'Unknown'),
#     ]

#     file_name = models.CharField(max_length=255)
#     file_size = models.IntegerField()  # Size in bytes
#     status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='unknown')
#     uploaded_at = models.DateTimeField(auto_now_add=True)
#     file = models.FileField(upload_to='uploads/')  # Stores the actual file

#     def __str__(self):
#         return self.file_name


class File(models.Model):
    file_name = models.CharField(max_length=255)  # Ensure this matches your database
    file_size = models.IntegerField()
    status = models.CharField(max_length=50)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.file_name