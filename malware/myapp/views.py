from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate
from django.contrib.auth.decorators import login_required
from .forms import RegistrationForm, LoginForm, FileUploadForm
from .models import UploadedFile, File
from django.shortcuts import get_object_or_404, redirect
from django.contrib import messages
from django.core.paginator import Paginator
import requests
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle
from django.http import HttpResponse
from django.conf import settings

def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.set_password(form.cleaned_data['password'])  # Hash the password
            user.save()
            return redirect('login')
    else:
        form = RegistrationForm()
    return render(request, 'register.html', {'form': form})

def user_login(request):
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            email = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(request, email=email, password=password)
            if user is not None:
                login(request, user)
                return redirect('dashboard')  # Redirect to a home page or dashboard
    else:
        form = LoginForm()
    return render(request, 'login.html', {'form': form})

@login_required
def dashboard(request):
    return render(request, 'dashboard.html')

#Uploading files view
from django.shortcuts import render, redirect
from .forms import FileUploadForm
from .models import UploadedFile
from .analyze_file import analyze_file  # Import the analysis function

from django.shortcuts import render, redirect
from .forms import FileUploadForm
from .models import UploadedFile
from .analyze_file import analyze_file

@login_required
def upload_files(request):
    if request.method == 'POST':
        form = FileUploadForm(request.POST, request.FILES)
        if form.is_valid():
            uploaded_file = form.save(commit=False)
            uploaded_file.file_name = uploaded_file.file.name
            uploaded_file.file_size = uploaded_file.file.size

            # Save the file to the database
            uploaded_file.save()

            # Analyze the file
            try:
                threat_level = analyze_file(uploaded_file.file.path)  # Use the correct file path
                uploaded_file.threat_level = threat_level
                uploaded_file.save()
            except FileNotFoundError as e:
                # Handle the error (e.g., log it or show a message to the user)
                print(f"Error analyzing file: {e}")
                uploaded_file.threat_level = 'pending'
                uploaded_file.save()

            return redirect('upload_files')
    else:
        form = FileUploadForm()

    recent_files = UploadedFile.objects.order_by('-uploaded_at')[:10]
    return render(request, 'upload_files.html', {'form': form, 'recent_files': recent_files})


# All files view
@login_required
def all_files(request):
    all_files = File.objects.all()
    paginator = Paginator(all_files, 10)  # Show 10 files per page
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    context = {
        'page_obj': page_obj,
    }
    
    form = FileUploadForm(request.POST, request.FILES)
    recent_files = UploadedFile.objects.order_by('-uploaded_at')[:10]
    return render(request, 'all_files.html', {'form': form, 'recent_files': recent_files})


# Delete files
@login_required
def delete_file(request, file_id):
    if request.method == 'POST':
        file = get_object_or_404(UploadedFile, id=file_id)  # Change 'File' to 'UploadedFile'
        file.delete()
        messages.success(request, 'File deleted successfully.')
    return redirect('all_files')

@login_required
def delete(request, file_id):
    if request.method == 'POST':
        file = get_object_or_404(UploadedFile, id=file_id)  # Change 'File' to 'UploadedFile'
        file.delete()
        messages.success(request, 'File deleted successfully.')
    return redirect('harmful')

# Analysis view
@login_required
def analysis(request):
    return render(request, 'analysis.html')

#Harmful filles view
@login_required
def harmful(request):
    # Fetch files marked as "harmful"
    harmful_files = UploadedFile.objects.filter(threat_level='harmful')

    context = {
        'harmful_files': harmful_files,
    }
    return render(request, 'harmful.html', context)

    
# Safe files view
@login_required
def safe(request):
    # Fetch files marked as "safe"
    safe = UploadedFile.objects.filter(status='safe')
    return render(request, 'safe.html', {'safe': safe})

# def analyse_file(request, file_id):
#     # Fetch the file by ID
#     file = get_object_or_404(UploadedFile, id=file_id)

#     # VirusTotal API endpoint
#     url = 'https://www.virustotal.com/vtapi/v2/file/scan'
#     report_url = 'https://www.virustotal.com/vtapi/v2/file/report'

#     # Prepare the file for scanning
#     files = {'file': (file.file_name, file.file.open())}
#     params = {'apikey': settings.VIRUSTOTAL_API_KEY}

#     # Step 1: Upload the file to VirusTotal for scanning
#     response = requests.post(url, files=files, params=params)
#     scan_result = response.json()

#     # Check if the file was successfully submitted for scanning
#     if scan_result.get('response_code') == 1:
#         resource = scan_result['resource']  # Unique resource ID for the file
#     else:
#         # Handle error if the file couldn't be submitted
#         context = {
#             'file': file,
#             'error': 'Failed to submit file for scanning.',
#         }
#         return render(request, 'analyse_file.html', context)

#     # Step 2: Retrieve the scan report
#     report_params = {'apikey': settings.VIRUSTOTAL_API_KEY, 'resource': resource}
#     report_response = requests.get(report_url, params=report_params)
#     report_result = report_response.json()

#     # Generate a downloadable PDF report
#     if request.GET.get('download') == 'true':
#         buffer = BytesIO()
#         pdf = SimpleDocTemplate(buffer, pagesize=letter)
#         styles = getSampleStyleSheet()

#         # Content for the PDF
#         content = []

#         # Add a title
#         title = Paragraph("File Analysis Report", styles['Title'])
#         content.append(title)

#         # Add file details
#         file_details = [
#             ["File Name", file.file_name],
#             ["Size", f"{file.file_size / 1024:.1f} KB"],
#             ["Status", file.get_status_display()],
#             ["Uploaded At", file.uploaded_at.strftime("%b. %d, %Y, %I:%M %p")],
#         ]
#         file_table = Table(file_details, colWidths=[200, 300])
#         file_table.setStyle(TableStyle([
#             ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
#             ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
#             ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
#             ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
#             ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
#             ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
#             ('GRID', (0, 0), (-1, -1), 1, colors.black),
#         ]))
#         content.append(file_table)

#         # Add analysis results
#         analysis_title = Paragraph("Analysis Results", styles['Heading2'])
#         content.append(analysis_title)

#         analysis_details = [
#             ["Scan ID", report_result.get('scan_id', 'N/A')],
#             ["Scan Date", report_result.get('scan_date', 'N/A')],
#             ["Positives", f"{report_result.get('positives', 0)} / {report_result.get('total', 0)}"],
#             ["Permalink", report_result.get('permalink', 'N/A')],
#         ]
#         analysis_table = Table(analysis_details, colWidths=[200, 300])
#         analysis_table.setStyle(TableStyle([
#             ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
#             ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
#             ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
#             ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
#             ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
#             ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
#             ('GRID', (0, 0), (-1, -1), 1, colors.black),
#         ]))
#         content.append(analysis_table)

#         # Add scan results
#         scan_results_title = Paragraph("Scan Results", styles['Heading2'])
#         content.append(scan_results_title)

#         scan_results_data = [["Antivirus", "Result"]]
#         for antivirus, result in report_result.get('scans', {}).items():
#             scan_results_data.append([antivirus, result.get('result', 'Clean')])

#         scan_results_table = Table(scan_results_data, colWidths=[200, 300])
#         scan_results_table.setStyle(TableStyle([
#             ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
#             ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
#             ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
#             ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
#             ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
#             ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
#             ('GRID', (0, 0), (-1, -1), 1, colors.black),
#         ]))
#         content.append(scan_results_table)

#         # Build the PDF
#         pdf.build(content)

#         # Prepare the HTTP response with the PDF file
#         buffer.seek(0)
#         response = HttpResponse(buffer, content_type='application/pdf')
#         response['Content-Disposition'] = f'attachment; filename="{file.file_name}_analysis_report.pdf"'
#         return response

#     # Prepare the context for the template
#     context = {
#         'file': file,
#         'scan_result': scan_result,
#         'report_result': report_result,
#     }

#     return render(request, 'analyse_file.html', context)


@login_required
def recent_analysis(request):
    # Fetch recently analyzed files (e.g., last 10 files)
    recent_files = UploadedFile.objects.order_by('-uploaded_at')[:10]
    return render(request, 'recent_analysis.html', {'recent_files': recent_files})

from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse, HttpResponse
from .models import UploadedFile
from .analyze_file import analyze_file
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle
from io import BytesIO

@login_required
def analyse_file(request, file_id):
    # Fetch the file by ID
    file = get_object_or_404(UploadedFile, id=file_id)

    # Analyze the file
    threat_level = analyze_file(file.file.path)

    # Update the file's threat level in the database
    file.threat_level = threat_level
    file.save()

    # Generate a downloadable PDF report if requested
    if request.GET.get('download') == 'true':
        buffer = BytesIO()
        pdf = SimpleDocTemplate(buffer, pagesize=letter)
        styles = getSampleStyleSheet()

        # Content for the PDF
        content = []

        # Add a title
        title = Paragraph("File Analysis Report", styles['Title'])
        content.append(title)

        # Add file details
        file_details = [
            ["File Name", file.file_name],
            ["Size", f"{file.file_size / 1024:.1f} KB"],
            ["Status", file.get_threat_level_display()],
            ["Uploaded At", file.uploaded_at.strftime("%b. %d, %Y, %I:%M %p")],
        ]
        file_table = Table(file_details, colWidths=[200, 300])
        file_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        content.append(file_table)

        # Add analysis results
        analysis_title = Paragraph("Analysis Results", styles['Heading2'])
        content.append(analysis_title)

        analysis_details = [
            ["Threat Level", threat_level],
        ]
        analysis_table = Table(analysis_details, colWidths=[200, 300])
        analysis_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        content.append(analysis_table)

        # Add recommendations
        recommendations_title = Paragraph("Recommendations", styles['Heading2'])
        content.append(recommendations_title)

        recommendations = []
        if threat_level == 'safe':
            recommendations = [
                "Ensure regular updates of security tools.",
                "Maintain a secure backup of critical files.",
                "Monitor logs for any unusual activity.",
            ]
        elif threat_level == 'suspicious':
            recommendations = [
                "Run an in-depth static and dynamic analysis.",
                "Block execution on production systems until further review.",
                "Utilize a sandbox for behavioral monitoring.",
            ]
        elif threat_level == 'harmful':
            recommendations = [
                "Immediately quarantine or delete the file.",
                "Alert the cybersecurity team and conduct forensic analysis.",
                "Apply patches and security updates if exploitation is possible.",
                "Review system logs for related suspicious activity.",
            ]

        recommendations_table = Table([[r] for r in recommendations], colWidths=[500])
        recommendations_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        content.append(recommendations_table)

        # Build the PDF
        pdf.build(content)

        # Prepare the HTTP response with the PDF file
        buffer.seek(0)
        response = HttpResponse(buffer, content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="{file.file_name}_analysis_report.pdf"'
        return response

    # Render the analysis page
    context = {
        'file': file,
        'threat_level': threat_level,
    }
    return render(request, 'analyse_file.html', context)